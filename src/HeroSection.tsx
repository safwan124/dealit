import NavBar from "./components/NavBar";
import './style.css';
import { Container, Row, Col } from 'react-bootstrap';
import * as THREE from 'three'
import { Suspense, useRef } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import Services from "./ServicesSection";

interface ModelProps {
  // Define more specific prop types if necessary
  [key: string]: any;
}

function Model(props: ModelProps) {
  const group = useRef<THREE.Group>(null); // Use null as initial value for ref

  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb');

  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    const currentGroup = group.current;
    if (currentGroup) { // Check if currentGroup is not undefined
      currentGroup.rotation.x = THREE.MathUtils.lerp(currentGroup.rotation.x, Math.cos(t / 2) / 20 + 0.25, 0.1);
      currentGroup.rotation.y = THREE.MathUtils.lerp(currentGroup.rotation.y, Math.sin(t / 4) / 20, 0.1);
      currentGroup.rotation.z = THREE.MathUtils.lerp(currentGroup.rotation.z, Math.sin(t / 8) / 20, 0.1);
      currentGroup.position.y = THREE.MathUtils.lerp(currentGroup.position.y, (-2 + Math.sin(t / 2)) / 2, 0.1);
    }
  });

  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh geometry={nodes['Cube008_2'].geometry}>
            {/* Drei's HTML component can "hide behind" canvas geometry */}
            <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.04, -0.1]} scale={0.3} transform occlude>
              <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                <Services />
              </div>
            </Html>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  );
}


function Hero() {
  return (
    <div className="hero-section">
      <NavBar />
      <Container className="hero-content">
        <Row className="align-items-center">
          <Col md={6} xs={12} className="hero-text text-center text-md-start">
            <h1>Let's Deal-it!</h1>
            <p>Your trusted partner in driving innovation and growth.</p>
          </Col>
          <Col md={6} xs={12} className="text-left">
            <Canvas style={{ width: '100%', height: '600px' }} camera={{ position: [-5, 0, -15], fov: 55 }}>
              <pointLight position={[10, 10, 10]} intensity={1.5} />
              <Suspense fallback={null}>
                <group rotation={[0, Math.PI, 0]} position={[0, 1, 0]}>
                  <Model />
                </group>
                <Environment preset="city" />
              </Suspense>
              <ContactShadows position={[0, -4.5, 0]} scale={20} blur={2} far={4.5} />
              <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2.2} maxPolarAngle={Math.PI / 2.2} />
            </Canvas>
          </Col>
        </Row>
      </Container>
    </div>
  );
}

export default Hero;
